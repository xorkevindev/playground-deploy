(self.webpackChunk=self.webpackChunk||[]).push([[658],{658:(t,e,r)=>{r.d(e,{Pn:()=>w,ZH:()=>h,TG:()=>c,bJ:()=>d});const n=58;class s{static read_bytes(t,e){const r=new s;return r.buf=t.getUint32(e,!0),r.buf_len=t.getUint32(e+4,!0),r}static read_bytes_array(t,e,r){const n=[];for(let i=0;i<r;i++)n.push(s.read_bytes(t,e+8*i));return n}}class i{static read_bytes(t,e){const r=new i;return r.buf=t.getUint32(e,!0),r.buf_len=t.getUint32(e+4,!0),r}static read_bytes_array(t,e,r){const n=[];for(let s=0;s<r;s++)n.push(i.read_bytes(t,e+8*s));return n}}class f{write_bytes(t,e){t.setUint8(e,this.fs_filetype),t.setUint16(e+2,this.fs_flags,!0),t.setBigUint64(e+8,this.fs_rights_base,!0),t.setBigUint64(e+16,this.fs_rights_inherited,!0)}constructor(t,e){this.fs_rights_base=0n,this.fs_rights_inherited=0n,this.fs_filetype=t,this.fs_flags=e}}class a{write_bytes(t,e){t.setBigUint64(e,this.dev,!0),t.setBigUint64(e+8,this.ino,!0),t.setUint8(e+16,this.filetype),t.setBigUint64(e+24,this.nlink,!0),t.setBigUint64(e+32,this.size,!0),t.setBigUint64(e+38,this.atim,!0),t.setBigUint64(e+46,this.mtim,!0),t.setBigUint64(e+52,this.ctim,!0)}constructor(t,e){this.dev=0n,this.ino=0n,this.nlink=0n,this.atim=0n,this.mtim=0n,this.ctim=0n,this.filetype=t,this.size=e}}const o=new class{enable(t){this.log=function(t,e){return t?console.log.bind(console,"%c%s","color: #265BA0",e):()=>{}}(void 0===t||t,this.prefix)}get enabled(){return this.isEnabled}constructor(t){this.isEnabled=t,this.prefix="wasi:",this.enable(t)}}(!1);class l extends Error{constructor(t){super("exit with exit code "+t),this.code=t}}let d=class{start(t){this.inst=t;try{return t.exports._start(),0}catch(t){if(t instanceof l)return t.code;throw t}}initialize(t){this.inst=t,t.exports._initialize&&t.exports._initialize()}constructor(t,e,r,f={}){this.args=[],this.env=[],this.fds=[],o.enable(f.debug),this.args=t,this.env=e,this.fds=r;const a=this;this.wasiImport={args_sizes_get(t,e){const r=new DataView(a.inst.exports.memory.buffer);r.setUint32(t,a.args.length,!0);let n=0;for(const t of a.args)n+=t.length+1;return r.setUint32(e,n,!0),o.log(r.getUint32(t,!0),r.getUint32(e,!0)),0},args_get(t,e){const r=new DataView(a.inst.exports.memory.buffer),n=new Uint8Array(a.inst.exports.memory.buffer),s=e;for(let s=0;s<a.args.length;s++){r.setUint32(t,e,!0),t+=4;const i=(new TextEncoder).encode(a.args[s]);n.set(i,e),r.setUint8(e+i.length,0),e+=i.length+1}return o.enabled&&o.log(new TextDecoder("utf-8").decode(n.slice(s,e))),0},environ_sizes_get(t,e){const r=new DataView(a.inst.exports.memory.buffer);r.setUint32(t,a.env.length,!0);let n=0;for(const t of a.env)n+=t.length+1;return r.setUint32(e,n,!0),o.log(r.getUint32(t,!0),r.getUint32(e,!0)),0},environ_get(t,e){const r=new DataView(a.inst.exports.memory.buffer),n=new Uint8Array(a.inst.exports.memory.buffer),s=e;for(let s=0;s<a.env.length;s++){r.setUint32(t,e,!0),t+=4;const i=(new TextEncoder).encode(a.env[s]);n.set(i,e),r.setUint8(e+i.length,0),e+=i.length+1}return o.enabled&&o.log(new TextDecoder("utf-8").decode(n.slice(s,e))),0},clock_res_get(t,e){let r;switch(t){case 1:r=5000n;break;case 0:r=1000000n;break;default:return 52}return new DataView(a.inst.exports.memory.buffer).setBigUint64(e,r,!0),0},clock_time_get(t,e,r){const n=new DataView(a.inst.exports.memory.buffer);if(0===t)n.setBigUint64(r,1000000n*BigInt((new Date).getTime()),!0);else if(1==t){let t;try{t=BigInt(Math.round(1e6*performance.now()))}catch(e){t=0n}n.setBigUint64(r,t,!0)}else n.setBigUint64(r,0n,!0);return 0},fd_advise:(t,e,r,n)=>null!=a.fds[t]?0:8,fd_allocate:(t,e,r)=>null!=a.fds[t]?a.fds[t].fd_allocate(e,r):8,fd_close(t){if(null!=a.fds[t]){const e=a.fds[t].fd_close();return a.fds[t]=void 0,e}return 8},fd_datasync:t=>null!=a.fds[t]?a.fds[t].fd_sync():8,fd_fdstat_get(t,e){if(null!=a.fds[t]){const{ret:r,fdstat:n}=a.fds[t].fd_fdstat_get();return null!=n&&n.write_bytes(new DataView(a.inst.exports.memory.buffer),e),r}return 8},fd_fdstat_set_flags:(t,e)=>null!=a.fds[t]?a.fds[t].fd_fdstat_set_flags(e):8,fd_fdstat_set_rights:(t,e,r)=>null!=a.fds[t]?a.fds[t].fd_fdstat_set_rights(e,r):8,fd_filestat_get(t,e){if(null!=a.fds[t]){const{ret:r,filestat:n}=a.fds[t].fd_filestat_get();return null!=n&&n.write_bytes(new DataView(a.inst.exports.memory.buffer),e),r}return 8},fd_filestat_set_size:(t,e)=>null!=a.fds[t]?a.fds[t].fd_filestat_set_size(e):8,fd_filestat_set_times:(t,e,r,n)=>null!=a.fds[t]?a.fds[t].fd_filestat_set_times(e,r,n):8,fd_pread(t,e,r,n,i){const f=new DataView(a.inst.exports.memory.buffer),o=new Uint8Array(a.inst.exports.memory.buffer);if(null!=a.fds[t]){const l=s.read_bytes_array(f,e,r);let d=0;for(const e of l){const{ret:r,data:s}=a.fds[t].fd_pread(e.buf_len,n);if(0!=r)return f.setUint32(i,d,!0),r;if(o.set(s,e.buf),d+=s.length,n+=BigInt(s.length),s.length!=e.buf_len)break}return f.setUint32(i,d,!0),0}return 8},fd_prestat_get(t,e){const r=new DataView(a.inst.exports.memory.buffer);if(null!=a.fds[t]){const{ret:n,prestat:s}=a.fds[t].fd_prestat_get();return null!=s&&s.write_bytes(r,e),n}return 8},fd_prestat_dir_name(t,e,r){if(null!=a.fds[t]){const{ret:n,prestat:s}=a.fds[t].fd_prestat_get();if(null==s)return n;const i=s.inner.pr_name;return new Uint8Array(a.inst.exports.memory.buffer).set(i.slice(0,r),e),i.byteLength>r?37:0}return 8},fd_pwrite(t,e,r,n,s){const f=new DataView(a.inst.exports.memory.buffer),o=new Uint8Array(a.inst.exports.memory.buffer);if(null!=a.fds[t]){const l=i.read_bytes_array(f,e,r);let d=0;for(const e of l){const r=o.slice(e.buf,e.buf+e.buf_len),{ret:i,nwritten:l}=a.fds[t].fd_pwrite(r,n);if(0!=i)return f.setUint32(s,d,!0),i;if(d+=l,n+=BigInt(l),l!=r.byteLength)break}return f.setUint32(s,d,!0),0}return 8},fd_read(t,e,r,n){const i=new DataView(a.inst.exports.memory.buffer),f=new Uint8Array(a.inst.exports.memory.buffer);if(null!=a.fds[t]){const o=s.read_bytes_array(i,e,r);let l=0;for(const e of o){const{ret:r,data:s}=a.fds[t].fd_read(e.buf_len);if(0!=r)return i.setUint32(n,l,!0),r;if(f.set(s,e.buf),l+=s.length,s.length!=e.buf_len)break}return i.setUint32(n,l,!0),0}return 8},fd_readdir(t,e,r,n,s){const i=new DataView(a.inst.exports.memory.buffer),f=new Uint8Array(a.inst.exports.memory.buffer);if(null!=a.fds[t]){let o=0;for(;;){const{ret:l,dirent:d}=a.fds[t].fd_readdir_single(n);if(0!=l)return i.setUint32(s,o,!0),l;if(null==d)break;if(r-o<d.head_length()){o=r;break}const u=new ArrayBuffer(d.head_length());if(d.write_head_bytes(new DataView(u),0),f.set(new Uint8Array(u).slice(0,Math.min(u.byteLength,r-o)),e),e+=d.head_length(),o+=d.head_length(),r-o<d.name_length()){o=r;break}d.write_name_bytes(f,e,r-o),e+=d.name_length(),o+=d.name_length(),n=d.d_next}return i.setUint32(s,o,!0),0}return 8},fd_renumber(t,e){if(null!=a.fds[t]&&null!=a.fds[e]){const r=a.fds[e].fd_close();return 0!=r?r:(a.fds[e]=a.fds[t],a.fds[t]=void 0,0)}return 8},fd_seek(t,e,r,n){const s=new DataView(a.inst.exports.memory.buffer);if(null!=a.fds[t]){const{ret:i,offset:f}=a.fds[t].fd_seek(e,r);return s.setBigInt64(n,f,!0),i}return 8},fd_sync:t=>null!=a.fds[t]?a.fds[t].fd_sync():8,fd_tell(t,e){const r=new DataView(a.inst.exports.memory.buffer);if(null!=a.fds[t]){const{ret:n,offset:s}=a.fds[t].fd_tell();return r.setBigUint64(e,s,!0),n}return 8},fd_write(t,e,r,n){const s=new DataView(a.inst.exports.memory.buffer),f=new Uint8Array(a.inst.exports.memory.buffer);if(null!=a.fds[t]){const o=i.read_bytes_array(s,e,r);let l=0;for(const e of o){const r=f.slice(e.buf,e.buf+e.buf_len),{ret:i,nwritten:o}=a.fds[t].fd_write(r);if(0!=i)return s.setUint32(n,l,!0),i;if(l+=o,o!=r.byteLength)break}return s.setUint32(n,l,!0),0}return 8},path_create_directory(t,e,r){const n=new Uint8Array(a.inst.exports.memory.buffer);if(null!=a.fds[t]){const s=new TextDecoder("utf-8").decode(n.slice(e,e+r));return a.fds[t].path_create_directory(s)}return 8},path_filestat_get(t,e,r,n,s){const i=new DataView(a.inst.exports.memory.buffer),f=new Uint8Array(a.inst.exports.memory.buffer);if(null!=a.fds[t]){const o=new TextDecoder("utf-8").decode(f.slice(r,r+n)),{ret:l,filestat:d}=a.fds[t].path_filestat_get(e,o);return null!=d&&d.write_bytes(i,s),l}return 8},path_filestat_set_times(t,e,r,n,s,i,f){const o=new Uint8Array(a.inst.exports.memory.buffer);if(null!=a.fds[t]){const l=new TextDecoder("utf-8").decode(o.slice(r,r+n));return a.fds[t].path_filestat_set_times(e,l,s,i,f)}return 8},path_link(t,e,r,n,s,i,f){const o=new Uint8Array(a.inst.exports.memory.buffer);if(null!=a.fds[t]&&null!=a.fds[s]){const l=new TextDecoder("utf-8").decode(o.slice(r,r+n)),d=new TextDecoder("utf-8").decode(o.slice(i,i+f)),{ret:u,inode_obj:_}=a.fds[t].path_lookup(l,e);return null==_?u:a.fds[s].path_link(d,_,!1)}return 8},path_open(t,e,r,n,s,i,f,l,d){const u=new DataView(a.inst.exports.memory.buffer),_=new Uint8Array(a.inst.exports.memory.buffer);if(null!=a.fds[t]){const c=new TextDecoder("utf-8").decode(_.slice(r,r+n));o.log(c);const{ret:h,fd_obj:w}=a.fds[t].path_open(e,c,s,i,f,l);if(0!=h)return h;a.fds.push(w);const p=a.fds.length-1;return u.setUint32(d,p,!0),0}return 8},path_readlink(t,e,r,n,s,i){const f=new DataView(a.inst.exports.memory.buffer),l=new Uint8Array(a.inst.exports.memory.buffer);if(null!=a.fds[t]){const d=new TextDecoder("utf-8").decode(l.slice(e,e+r));o.log(d);const{ret:u,data:_}=a.fds[t].path_readlink(d);if(null!=_){const t=(new TextEncoder).encode(_);if(t.length>s)return f.setUint32(i,0,!0),8;l.set(t,n),f.setUint32(i,t.length,!0)}return u}return 8},path_remove_directory(t,e,r){const n=new Uint8Array(a.inst.exports.memory.buffer);if(null!=a.fds[t]){const s=new TextDecoder("utf-8").decode(n.slice(e,e+r));return a.fds[t].path_remove_directory(s)}return 8},path_rename(t,e,r,n,s,i){const f=new Uint8Array(a.inst.exports.memory.buffer);if(null!=a.fds[t]&&null!=a.fds[n]){const o=new TextDecoder("utf-8").decode(f.slice(e,e+r)),l=new TextDecoder("utf-8").decode(f.slice(s,s+i));let{ret:d,inode_obj:u}=a.fds[t].path_unlink(o);if(null==u)return d;if(d=a.fds[n].path_link(l,u,!0),0!=d&&0!=a.fds[t].path_link(o,u,!0))throw"path_link should always return success when relinking an inode back to the original place";return d}return 8},path_symlink(t,e,r,s,i){const f=new Uint8Array(a.inst.exports.memory.buffer);return null!=a.fds[r]?(new TextDecoder("utf-8").decode(f.slice(t,t+e)),new TextDecoder("utf-8").decode(f.slice(s,s+i)),n):8},path_unlink_file(t,e,r){const n=new Uint8Array(a.inst.exports.memory.buffer);if(null!=a.fds[t]){const s=new TextDecoder("utf-8").decode(n.slice(e,e+r));return a.fds[t].path_unlink_file(s)}return 8},poll_oneoff(t,e,r){throw"async io not supported"},proc_exit(t){throw new l(t)},proc_raise(t){throw"raised signal "+t},sched_yield(){},random_get(t,e){const r=new Uint8Array(a.inst.exports.memory.buffer);for(let n=0;n<e;n++)r[t+n]=256*Math.random()|0},sock_recv(t,e,r){throw"sockets not supported"},sock_send(t,e,r){throw"sockets not supported"},sock_shutdown(t,e){throw"sockets not supported"},sock_accept(t,e){throw"sockets not supported"}}}};class u{fd_allocate(t,e){return n}fd_close(){return 0}fd_fdstat_get(){return{ret:n,fdstat:null}}fd_fdstat_set_flags(t){return n}fd_fdstat_set_rights(t,e){return n}fd_filestat_get(){return{ret:n,filestat:null}}fd_filestat_set_size(t){return n}fd_filestat_set_times(t,e,r){return n}fd_pread(t,e){return{ret:n,data:new Uint8Array}}fd_prestat_get(){return{ret:n,prestat:null}}fd_pwrite(t,e){return{ret:n,nwritten:0}}fd_read(t){return{ret:n,data:new Uint8Array}}fd_readdir_single(t){return{ret:n,dirent:null}}fd_seek(t,e){return{ret:n,offset:0n}}fd_sync(){return 0}fd_tell(){return{ret:n,offset:0n}}fd_write(t){return{ret:n,nwritten:0}}path_create_directory(t){return n}path_filestat_get(t,e){return{ret:n,filestat:null}}path_filestat_set_times(t,e,r,s,i){return n}path_link(t,e,r){return n}path_unlink(t){return{ret:n,inode_obj:null}}path_lookup(t,e){return{ret:n,inode_obj:null}}path_open(t,e,r,n,s,i){return{ret:54,fd_obj:null}}path_readlink(t){return{ret:n,data:null}}path_remove_directory(t){return n}path_rename(t,e,r){return n}path_unlink_file(t){return n}}class _{}class c extends u{fd_allocate(t,e){if(this.file.size>t+e);else{const r=new Uint8Array(Number(t+e));r.set(this.file.data,0),this.file.data=r}return 0}fd_fdstat_get(){return{ret:0,fdstat:new f(4,0)}}fd_filestat_set_size(t){if(this.file.size>t)this.file.data=new Uint8Array(this.file.data.buffer.slice(0,Number(t)));else{const e=new Uint8Array(Number(t));e.set(this.file.data,0),this.file.data=e}return 0}fd_read(t){const e=this.file.data.slice(Number(this.file_pos),Number(this.file_pos+BigInt(t)));return this.file_pos+=BigInt(e.length),{ret:0,data:e}}fd_pread(t,e){return{ret:0,data:this.file.data.slice(Number(e),Number(e+BigInt(t)))}}fd_seek(t,e){let r;switch(e){case 0:r=t;break;case 1:r=this.file_pos+t;break;case 2:r=BigInt(this.file.data.byteLength)+t;break;default:return{ret:28,offset:0n}}return r<0?{ret:28,offset:0n}:(this.file_pos=r,{ret:0,offset:this.file_pos})}fd_tell(){return{ret:0,offset:this.file_pos}}fd_write(t){if(this.file.readonly)return{ret:8,nwritten:0};if(this.file_pos+BigInt(t.byteLength)>this.file.size){const e=this.file.data;this.file.data=new Uint8Array(Number(this.file_pos+BigInt(t.byteLength))),this.file.data.set(e)}return this.file.data.set(t,Number(this.file_pos)),this.file_pos+=BigInt(t.byteLength),{ret:0,nwritten:t.byteLength}}fd_pwrite(t,e){if(this.file.readonly)return{ret:8,nwritten:0};if(e+BigInt(t.byteLength)>this.file.size){const r=this.file.data;this.file.data=new Uint8Array(Number(e+BigInt(t.byteLength))),this.file.data.set(r)}return this.file.data.set(t,Number(e)),{ret:0,nwritten:t.byteLength}}fd_filestat_get(){return{ret:0,filestat:this.file.stat()}}constructor(t){super(),this.file_pos=0n,this.file=t}}class h extends _{path_open(t,e,r){if(this.readonly&&(e&BigInt(64))==BigInt(64))return{ret:63,fd_obj:null};if(!(8&~t)){if(this.readonly)return{ret:63,fd_obj:null};this.data=new Uint8Array([])}const n=new c(this);return 1&r&&n.fd_seek(0n,2),{ret:0,fd_obj:n}}get size(){return BigInt(this.data.byteLength)}stat(){return new a(4,this.size)}constructor(t,e){super(),this.data=new Uint8Array(t),this.readonly=!!e?.readonly}}class w extends u{fd_filestat_get(){return{ret:0,filestat:new a(2,BigInt(0))}}fd_fdstat_get(){const t=new f(2,0);return t.fs_rights_base=BigInt(64),{ret:0,fdstat:t}}fd_write(t){return this.write(t),{ret:0,nwritten:t.byteLength}}static lineBuffered(t){const e=new TextDecoder("utf-8",{fatal:!1});let r="";return new w((n=>{r+=e.decode(n,{stream:!0});const s=r.split("\n");for(const[e,n]of s.entries())e<s.length-1?t(n):r=n}))}constructor(t){super(),this.write=t}}}}]);